<Application x:Class="twitch_tv_viewer.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:components="clr-namespace:twitch_tv_viewer.Views.Components"
             xmlns:componentsVm="clr-namespace:twitch_tv_viewer.ViewModels.Components"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:twitchTvViewer="clr-namespace:twitch_tv_viewer"
             xmlns:models="clr-namespace:twitch_tv_viewer.Models"
             StartupUri="Views/MainWindow.xaml">
    <Application.Resources>

        <!--  Data templates  -->

        <twitchTvViewer:ViewModelLocator x:Key="Locator" />

        <DataTemplate DataType="{x:Type componentsVm:ChannelsDisplayViewModel}">
            <components:ChannelsDisplay />
        </DataTemplate>

        <DataTemplate DataType="{x:Type componentsVm:MessageDisplayViewModel}">
            <components:MessageDisplay />
        </DataTemplate>

        <!--  Storyboards  -->

        <Storyboard x:Key="Fade">
            <DoubleAnimation Duration="0:0:0.50"
                             From="0.0"
                             Storyboard.TargetProperty="Opacity"
                             To="1.0" />
            <DoubleAnimation BeginTime="0:0:2.50"
                             Duration="0:0:1.00"
                             From="1.0"
                             Storyboard.TargetProperty="Opacity"
                             To="0.0" />
        </Storyboard>

        <Storyboard x:Key="FadeIn">
            <DoubleAnimation Duration="0:0:0.25"
                             From="0.0"
                             Storyboard.TargetProperty="Opacity"
                             To="1.0" />
        </Storyboard>

        <!--  Constants  -->

        <SolidColorBrush x:Key="Text">GreenYellow</SolidColorBrush>
        <SolidColorBrush x:Key="Border">DarkSlateGray</SolidColorBrush>
        <SolidColorBrush x:Key="Background">Black</SolidColorBrush>
        <SolidColorBrush x:Key="Input">#162525</SolidColorBrush>
        <system:Double x:Key="FontSize">18</system:Double>
        <FontFamily x:Key="Font">Consolas</FontFamily>

        <!--  Master style  -->

        <Style TargetType="Control">
            <Setter Property="Background" Value="{StaticResource Background}" />
            <Setter Property="Foreground" Value="{StaticResource Text}" />
            <Setter Property="FontFamily" Value="{StaticResource Font}" />
            <Setter Property="FontSize" Value="{StaticResource FontSize}" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>

        <!--  Control/Input styles  -->

        <Style BasedOn="{StaticResource {x:Type Control}}" TargetType="Label" />

        <Style BasedOn="{StaticResource {x:Type Control}}" TargetType="Button">

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="Background" Value="{StaticResource Border}" />
                </Trigger>
            </Style.Triggers>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="0">
                            <ContentPresenter Margin="3"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center">
                                <ContentPresenter.Resources>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="TextDecorations" Value="Underline" />
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="Notification"
               BasedOn="{StaticResource {x:Type Label}}"
               TargetType="Label">
            <Style.Triggers>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard Storyboard="{StaticResource Fade}" />
                </EventTrigger>
            </Style.Triggers>
        </Style>

        <Style BasedOn="{StaticResource {x:Type Control}}" TargetType="TextBox">
            <Setter Property="Background" Value="{StaticResource Input}" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="IsReadOnly" Value="False" />
            <Setter Property="AcceptsReturn" Value="False" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Margin" Value="10" />
        </Style>

        <Style TargetType="{x:Type ComboBoxItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Border"
                                Background="{StaticResource Background}"
                                BorderThickness="0">
                            <TextBlock Margin="5, 0"
                                       Background="{StaticResource Background}"
                                       FontFamily="{StaticResource Font}"
                                       FontSize="{StaticResource FontSize}"
                                       Foreground="{StaticResource Text}">
                                <InlineUIContainer>
                                    <ContentPresenter />
                                </InlineUIContainer>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Datagrid Styles  -->

        <Style BasedOn="{StaticResource {x:Type Control}}" TargetType="ContextMenu" />
        
        <Style TargetType="DataGrid">
            <Setter Property="AutoGenerateColumns" Value="False" />
            <Setter Property="Background" Value="{StaticResource Background}" />
            <Setter Property="RowBackground" Value="{StaticResource Background}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="CanUserAddRows" Value="False" />
            <Setter Property="CanUserResizeRows" Value="False" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="GridLinesVisibility" Value="None" />
            <Setter Property="HeadersVisibility" Value="None" />
            <Setter Property="IsReadOnly" Value="True" />
            <Setter Property="SelectionUnit" Value="FullRow" />
            <Setter Property="UseLayoutRounding" Value="False" />
            <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
            <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
            <Setter Property="Margin" Value="5" />
        </Style>

        <Style x:Key="ColumnElementStyle" TargetType="TextBlock">
            <Setter Property="TextTrimming" Value="WordEllipsis" />
            <Setter Property="Margin" Value="0,0,15,0" />
        </Style>

        <Style TargetType="DataGridCell">
            <Setter Property="Background" Value="{StaticResource Background}" />
            <Setter Property="Foreground" Value="{StaticResource Text}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="FontFamily" Value="{StaticResource Font}" />
            <Setter Property="FontSize" Value="{StaticResource FontSize}" />
            <Setter Property="ToolTip" Value="{Binding Content.Text, RelativeSource={RelativeSource Self}}" />
            <Setter Property="ToolTipService.InitialShowDelay" Value="500"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#080E0E" />
                </Trigger>

                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#142323" />
                </Trigger>

                <!--Background-->

                <DataTrigger Binding="{Binding Promoted}" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Color="#243A15" Offset="0"/>
                                    <GradientStop Color="#18270E" Offset="0.5"/>
                                    <GradientStop Color="#243A15" Offset="1"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                        <Condition Binding="{Binding Promoted}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="#101C1C" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                        <Condition Binding="{Binding Promoted}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Color="#35541F" Offset="0"/>
                                    <GradientStop Color="#213613" Offset="0.5"/>
                                    <GradientStop Color="#35541F" Offset="1"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>





            </Style.Triggers>
        </Style>

        <!--  Container styles  -->

        <Style TargetType="DockPanel">
            <Setter Property="Background" Value="{StaticResource Background}" />
        </Style>

        <Style x:Key="PopupStackPanel" TargetType="StackPanel">
            <Setter Property="Background" Value="{StaticResource Background}" />
            <Style.Resources>
                <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                    <Setter Property="Margin" Value="10" />
                    <Setter Property="HorizontalAlignment" Value="Right" />
                </Style>
                <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                    <Setter Property="Margin" Value="10" />
                </Style>
                <Style TargetType="StackPanel">
                    <Setter Property="Margin" Value="10" />
                    <Setter Property="Orientation" Value="Horizontal" />
                    <Setter Property="HorizontalAlignment" Value="Right" />
                    <Style.Resources>
                        <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                            <Setter Property="Margin" Value="0" />
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </Style.Resources>
                </Style>
            </Style.Resources>
        </Style>

        <Style TargetType="Border">
            <Setter Property="Background" Value="{StaticResource Background}" />
            <Setter Property="BorderBrush" Value="{StaticResource Border}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

        <!--  Window  -->

        <Style x:Key="PopupWindow" TargetType="Window">
            <Setter Property="Width" Value="300" />
            <Setter Property="Height" Value="150" />
            <Setter Property="ResizeMode" Value="NoResize" />
            <!--<Setter Property="ShowInTaskbar" Value="False" />-->
            <Setter Property="WindowStyle" Value="None" />
        </Style>

    </Application.Resources>
</Application>